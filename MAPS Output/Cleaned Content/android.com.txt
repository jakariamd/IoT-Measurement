Modern AndroidQuickly bring your app to life with less code, using a modern declarative approach to UI, and the simplicity of Kotlin. Get startedStart by creating your first app.Go deeper with our training courses or explore app development on your own. Extend by deviceBuild apps that give your users seamless experiences from phones to tablets, watches, and more. Build by categoryLearn to build for your use case by following Google's prescriptive and opinionated guidance. Get the latestStay in touch with the latest releases throughout the year, join our preview programs, and give us your feedback. Kits & moreGet one of our Figma kits for Android, Material Design, or Wear OS, and start designing your app's UI today. UI DesignDesign a beautiful user interface using Android best practices. ArchitectureDesign robust, testable, and maintainable app logic and services. QualityPlan for app quality and align with Play store guidelines. Build for BillionsCreate the best experience for entry-level devices Sign in Essentials More Design & Plan More Develop Overview Guides UI Guide Reference Samples Google Play Android Studio Developer guidesApp basicsBuild your first appApp fundamentalsApp resourcesAbout app resourcesHandle configuration changesLocalizationLocalize your appTest your app with pseudolocalesUnicode and internationalization supportLanguage and locale resolutionPer-app language preferencesComplex XML resources Resource typesAbout resource typesAnimationColor state listDrawableLayoutMenuStringStyleFontMore typesApp manifest fileAbout app manifests DevicesDevice compatibility About device compatibilityAbout screen compatibilitySupport different pixel densitiesDeclare restricted screen supportMultiple APK supportAbout multiple APKsCreate multiple APKs for different API levelsCreate multiple APKs for different screen sizesCreate multiple APKs for different GL texturesCreate multiple APKs with several dimensionsSupport different languages and culturesSupport different platform versions Filters on Google Play64-bit SupportLarge screens â€” tablets, foldables, ChromeOSGet started with large screensLarge screen canonical layoutsLarge screen readyMulti-window supportMedia projectionInput compatibility on large screensLarge screen optimizedSupport different screen sizesMigrate your UI to responsive layoutsNavigation for responsive UIsActivity embeddingLarge screen differentiated Learn about foldablesMake your app fold awareTest your app on foldablesAdvanced stylusLarge screen app compatibilityLarge screen cookbookWearGet startedPrinciples of Wear OS developmentUpgrade to the latest version of Wear OSTry out the latest version of Wear OS Developer PreviewWear OS versus mobile developmentWear OS user interfacesAccessibility on Wear OSGetting started Wear OS developer pathwayCreate and run an appDebug a Wear OS appConnect a watch to a phoneCapture Wear UI screenshotsAppsAbout Wear OS appsStandalone appsAuthenticationRequest permissionsAdd a splash screenDetect locationPlaying audio on wearablesAppear in recents and app resumeBuilding UI with ComposeUse Jetpack Compose on Wear OSCompose performance Rotary input on ComposeNavigation with Compose for Wear OSBuilding UI with ViewsBuild View-based UIs on Wear OSHandle different watch shapesCreate listsNavigationExit full screen activities on WearShow confirmationsKeep your app visible on WearTiles and complicationsAbout tilesGet started with tilesShow periodic updatesShow dynamic updatesAnimate tile elements Interact with tilesWatch face complicationsExpose data to complicationsMigrate to ProtoLayout namespacesNotificationsNotifications on Wear OSBridging options for notificationsOngoing ActivitiesHandling dataDynamic expressionsSend and sync data on Wear OSNetwork access and sync on Wear OSAccess the Wearable Data LayerTransfer assetsSend and receive messagesHandle data layer events Sync data items with the Data Layer APIUser inputPhysical buttonsRotary input on ViewsCreate input method editors in WearVoiceHealth servicesAbout health servicesActive data and exerciseRecord an exerciseHandle exercise eventsTake spot health measurementsPassive data updatesTest your app with synthetic dataEnhance app compatibilityCreating watch facesAbout watch faces Watch Face FormatOverviewSetupXML referenceJetpack Watch Face APIsDesign watch facesBuild a watch face serviceDraw watch facesAdding complications to a watch faceCreating interactive watch facesProvide configuration activitiesAddress common issuesImprove performace with hardware accelerationOptimize performance and battery lifeSelf-tag watch facesWear app quality Package Wear OS appsDistribute to Wear OSCreate Wear OS apps for ChinaWear OS release notesAndroid TVIn this guideBuild TV AppsIn this guideGet started with TV appsAndroidX TV librariesHandle TV hardwareManage TV controllersBuild TV layoutsOn-screen keyboardCreate TV navigationBest practices for driving engagement on Google TVBuild TV playback apps In this guideBuidling UI with ComposeUse Jetpack Compose on Android TVCreate a catalog browserBuild a details screenBuilding UI with Leanback APICreate a catalog browserProvide a card viewBuild a details viewUse transport controlsIntroduce first-time users to your appAdd a guided stepAmbient modePlayback controls on TVImplement a media sessionBackground playback in a Now Playing card Audio capabilitiesMatch content frame rateHelp users find content on TVAbout finding TV contentRecommend TV contentAbout recommending TV contentChannels on the home screenVideo program attributesAudio program attributesGame program attributesWatch NextAdd programsAttributesGuidelines for app developersGuidelines for TV providersPreview videosRecommendations in Android N and earlier Make TV apps searchableSearch within TV AppsBuild TV gamesAbout TV gamesBuild TV input servicesAbout TV input servicesDevelop a TV input serviceWork with channel dataManage TV user interactionSupport time-shiftingSupport content recordingTV AccessibilityAccessibility best practicesTalkBack evaluation examplesAdopt system caption settingsCustom view accessibility support Custom view accessibility sampleTV Apps checklistDistribute to Android TVReleasesAndroid 12 for TVAndroid 13 for TVAndroid for CarsAbout Android for CarsCar app qualityBuild media apps for carsBuild media apps for carsAdd support for Android AutoAdd support for Android Automotive OSBuild messaging apps for Android AutoBuild point of interest, internet of things, and navigation apps for cars Using the Android for Cars App LibraryBuild point of interest apps for carsBuild internet of things apps for carsBuild navigation apps for carsAdd support for Android AutoAdd support for Android Automotive OSBuild parked apps for Android Automotive OSAbout parked appsBuild video appsBuild gamesBuild browsersTest Android apps for carsOverviewTest using the Desktop Head Unit Test using the Android Automotive OS emulatorDistribute Android apps for carsGoogle Play services for carsNotifications on Android Automotive OSChromeOS devicesAbout ChromeOSBuilding apps for ChromeOSOptimizing Apps for ChromeOSPreparing your development environmentApp Manifest Compatibility for ChromebooksChromeOS Device Support for AppsApp Rendering Differences on ChromebooksWindow management Adapting Games on ChromeOSSmooth animation on ChromeOSTest Cases for Android Apps on ChromeOSCross device SDKAbout the Cross device SDKGet startedDevice discovery APISecure connection APISessions APITest and debugAPI ReferenceAndroid (Go edition)About Android Go editionDevelop for Android (Go edition)Test Android Go appsOptimize for Android (Go edition)Approach Optimize app memoryImprove startup latencyReduce app sizeBest practicesApp architectureIntroductionGuide to app architectureAbout app architectureUI layerAbout the UI layerUI eventsState holders and UI stateState productionDomain layerData layerAbout the data layerOffline firstArchitecture recommendationsLearning pathwayModularization About modularizationCommon patternsRecipesNavigationArchitecture componentsUI layer librariesView bindingAbout view bindingMigrate from Kotlin synthetics to view bindingData binding libraryAbout data bindingGet startedLayouts and binding expressionsWork with observable data objectsGenerated binding classesBinding adaptersBind layout views to Architecture Components Two-way data bindingLifecycle-aware componentsHandle lifecyclesViewModelAbout ViewModelCreate ViewModels with dependenciesViewModel Scoping APIsSaved State module for ViewModelViewModel APIs cheat sheetLiveDataSave UI statesUse Kotlin coroutines with lifecycle-aware componentsPaging LibraryAbout pagingLoad and display paged dataPage from network and database Transform data streamsManage and present loading statesTest your Paging implementationMigrate to Paging 3Paging 2About Paging 2Display paged listsLoad paged dataData layer librariesDataStoreWorkManagerAbout WorkManagerGetting StartedHow-To GuidesDefining your WorkRequestsWork statesManaging workObserving intermediate Worker progressChaining work together Testing Worker implementationIntegration tests with WorkManagerDebugging WorkManagerAdvanced ConceptsConfiguration and InitializationThreading in WorkManagerAbout threading in WorkManagerThreading in WorkerThreading in CoroutineWorkerThreading in RxWorkerThreading in ListenableWorkerSupport for long-running workersMigrating from Firebase JobDispatcherMigrating from GCMNetworkManager App entry pointsActivitiesIntroduction to activitiesThe activity lifecycleActivity state changesTest your app's activitiesTasks and the back stackProcesses and app lifecycleParcelables and bundlesLoadersRecents screenRestrictions on starting activities from the backgroundApp shortcutsAbout app shortcutsCreate shortcutsAdd capabilitiesManage shortcuts Best practices for shortcutsApp navigationPrinciples of navigationNavigation componentOverviewGet startedDesign your navigation graphOverviewCreate destinationsNested graphsDeep linksNew destination typesType safetyGlobal actionsBuild a graph programmatically using the Kotlin DSLUse your navigation graphNavigate to a destinationNavigate with options Safe argsPass data between destinationsAnimate transitions between destinationsConditional navigationInteract programmatically with the Navigation componentThe back stackOverviewDialogs and the back stackCircular navigation and the back stackMultiple back stacksIntegrationsNavigate with feature modulesMulti-module projectsConnect UI components to NavControllerMigrate to the Navigation component Test NavigationCustom back navigationCustom back navigationPredictive back gestureResponsive designHandling configuration changesDesign for different form factorsSwipe between viewsSwipe views using ViewPager2Swipe views using ViewPagerFragmentsAbout fragmentsCreate a fragmentFragment managerFragment transactionsAnimate transitions between fragmentsFragment lifecycle Saving state with fragmentsCommunicate with fragmentsWorking with the app barDisplaying dialogs with DialogFragmentDebug your fragmentsTest your fragmentsApp linksAbout app linksEnabling links to app contentVerify app linksCreate app links for instant appsDependency injectionAbout dependency injectionManual dependency injectionDependency injection with HiltHilt in multi-module apps Use Hilt with other Jetpack librariesHilt testing guideHilt and Dagger annotations cheat sheetDaggerDagger basicsUsing Dagger in Android appsUsing Dagger in multi-module appsApp StartupUser interfacesBuild Android user interfacesCreate backward-compatible UIsAbout backward-compatible UIsAbstracting the new APIsProxying to the new APIsCreating an implementation with older APIs Using the version-aware componentCore topicsApp compatibilityAbout app compatibilityCompatibility framework toolsRestrictions on non-SDK interfacesInteract with other appsAbout interacting with other appsSending the user to another appGetting a result from an activityAllowing other apps to start your activityLimit loading in on-device Android containersPackage visibilityAbout package visibility Know which packages are visible automaticallyDeclare package visibility needsFulfill common use casesTest package visibilityIntents and intent filtersAbout intents and intent filtersCommon intentsAudio & videoAbout audio and videoIntroduction to Jetpack Media3Media3 MediaSessionThe Player interfaceControl and advertise playback using a MediaSessionBackground playback with a MediaSessionService Serve a content library with a MediaLibraryServiceConnect to a media app with a MediaController or MediaBrowserMedia3 ExoPlayerAbout Media3 ExoPlayerGetting startedHello worldPlayer eventsPlaylistsMedia itemsMedia sourcesTrack selectionUI componentsDownloading mediaAd insertionRetrieving metadataLive streamingNetwork stacksDebug loggingAnalytics Media typesDASHHLSSmoothStreamingProgressiveRTSPAdvanced topicsDigital rights managementTroubleshootingCustomizationBattery consumptionAPK shrinkingOEM testingHelpful resourcesMigrating to Media3Migration guideExoPlayer to Media3 mappingsPros and consDemo applicationSupported formatsSupported devicesGlossary Release notesJavadocGitHubBlogMedia3 TransformerAbout Media3 TransformerGetting startedHello worldDemo applicationTransformationsSupported formatsAdvanced topicsCustomizationTroubleshootingRelease notesJavadocGitHubExoPlayer BlogJetpack MediaRouterRouting overviewControlling playback output routingDefining playback output routes Platform APIs and behaviorsPlatform topics overviewMedia formatsSupported media formatsUltra HDR image format specificationCompatible media transcodingMediaPlayer overviewControlling amplitude with VolumeShaperImprove audio playbackHandling changes in audio outputSharing audio inputMediaRecorder overviewCapture video and audio playbackLegacy media APIsMedia app architecture Using a media sessionBuilding an audio appAbout audio appsBuilding a media browser serviceBuilding a media browser clientMedia session callbacksBuilding a video appAbout video appsBuilding a video player activityMedia session callbacksResponding to media buttonsServicesAbout servicesForeground servicesBound servicesAbout AIDLBackground tasksAbout background tasks Background optimizationsManage awake stateAsynchronous workAbout async workJava threadsCoroutinesListenable futurePersistent workAbout persistent workGetting startedGetting startedDefine your work requestsHow toWork statesManage workChain work togetherSupport for long-running workersObserve intermediate worker progressUpdate work ThreadingAbout threadingThreading in WorkerThreading in CoRoutineWorkerThreading in RxWorkerThreading in ListenableWorkerConfigurationCustom WorkManager configurationsMigrate from legacy solutionsMigrate from Firebase JobDispatcherMigrate from GCMNetworkManagerTestingAsynchronous workCoroutines testingPersistent workDebug WorkManagerIntegration testing Test worker implementationBroadcastsAbout broadcastsImplicit Broadcast ExceptionsAlarmsAbout alarmsSchedule alarmsPermissionsAbout permissionsDeclare app permissionsRequest app permissionsRequest runtime permissionsRequest special permissionsExplain access to more sensitive informationApp permissions best practicesPermissions used only in default handlers Restrict interactions with other appsDefine custom permissionsApp data and filesAbout app data and filesAbout storageSave to app-specific storageSave to shared storageAbout shared storageMediaPhoto pickerDocuments and other filesDatasetsManage all files on a storage deviceSave key-value dataSave data in a local databaseAbout the local databaseDefine data using entities Access data using DAOsDefine relationships between objectsWrite asynchronous DAO queriesCreate views into a databasePrepopulate your databaseMigrate your databaseTest and debug your databaseReference complex dataMigrate from SQLite to RoomSave data using SQLiteStorage use cases and best practicesSharing simple dataAbout sharing simple dataSending simple data to other appsReceiving simple data from other apps Provide Direct Share targetsSharing filesAbout sharing filesSetting up file sharingSharing a fileRequesting a shared fileRetrieving file informationSharing files using NFCAbout sharing using NFCSending files to another deviceReceiving files from another devicePrinting filesAbout printingPrinting photosPrinting HTML documentsPrinting custom documentsContent providers About content providersContent provider basicsCreating a content providerOpen files using storage access frameworkCreate a custom document providerApp install locationUser data and identityAbout user dataAdd sign-in workflowShow a biometric authentication dialogSign in your user with Credential ManagerIntegrate Credential Manager with Sign in with GoogleIntegrate Credential Manager with your credential provider solution Autofill frameworkAbout autofillOptimize your app for autofillBuild autofill servicesIntegrate autofill with keyboardsIdentify developer-owned appsGet a user-resettable advertising IDAbout the calendar providerContacts providerAbout the contacts providerRetrieving a list of contactsRetrieving details for a contactModifying contacts using intentsDisplaying the quick contact badge Account transferData backupAbout backupBack up user dataBack up key-value pairsTest backup and restoreBest practices for unique identifiersRemember and authenticate usersAbout authenticationRemember your userAuthenticate to OAuth2 servicesCreate a custom account typeUser locationAbout user locationRequest location permissionsGet the last known locationChange location settings Request location updatesAccess location in the backgroundCreate and monitor geofencesDetect when users start an activityOptimize location for batteryTest location workflowsMigrate to Google Play services location and context APIsMaps and placesCameraChoose a camera libraryCamera intentsCamera extensionsAbout camera extensionsSupported devicesCameraXAbout CameraX ArchitectureConfigurationUse casesPreviewImage captureImage analysisVideo captureAdvanced topicsExtensions APIML Kit AnalyzerRotationsTransform outputDevicesCamera1 to CameraX migration guideCamera2About Camera2Camera capture sessions and requestsCamera lenses and capabilitiesUse multiple camera streams simultaneouslyCamera preview HDR video captureMulti-Camera APIExtensions APICamera (deprecated)About Camera (deprecated)Take photos (deprecated)Record videos (deprecated)Control the camera (deprecated)Camera API (deprecated)SensorsIn this guideAbout sensorsMotion sensorsPosition sensorsEnvironment sensorsRaw GNSS measurementsConnectivityIn this guideUsage considerations Reduce network battery drainAbout preserving batteryAvoid unoptimized downloadsMinimize the effect of regular updatesTroubleshoot network issuesBuild client-server applications with gRPCAbout Session Initiation Protocol (SIP)Open Mobile API reader supportPerform network operations using CronetAbout CronetSend a simple requestAbout the Cronet request lifecycleUse Cronet with other libraries Referenceorg.chromium.netOverviewCallbackExceptionCronetEngineOverviewCronetEngine.BuilderOverviewLibraryLoaderCronetExceptionInlineExecutionProhibitedExceptionNetworkExceptionQuicExceptionUploadDataProviderUploadDataProvidersUploadDataSinkUrlRequestOverviewBuilderCallbackStatusStatusListenerUrlResponseInfo org.chromium.net.apihelpersOverviewByteArrayCronetCallbackCronetRequestCompletionListenerCronetResponseImplicitFlowControlCallbackInMemoryTransformCronetCallbackJsonCronetCallbackRedirectHandlerRedirectHandlersStringCronetCallbackUploadDataProvidersUrlRequestCallbacksOverviewCallbackAndResponseFuturePairTransfer data using Sync AdaptersAbout sync adapters Create a Stub AuthenticatorCreate a Stub Content ProviderCreate a Sync AdapterRun a Sync AdapterNetworkPerform network operationsAbout performing network operationsConnect to the networkManage network usageRead network stateOptimize network accessOptimize network data usageMonitor connectivity status and connection meteringParse XML dataWi-FiSet up Wi-Fi scanning Overview of Wi-Fi peer-to-peer (P2P)Implementing Wi-Fi AwareSet up Wi-Fi location with the RTT APIUse a local-only hotspotDiscover and connectAbout Network Service Discovery (NSD)Use network service discoveryCreate P2P connections with Wi-Fi DirectUse Wi-Fi Direct for service discoveryWi-Fi Easy ConnectWi-Fi infrastructureAbout Wi-Fi infrastructureWi-Fi suggestion API for internet connectivity Wi-Fi Network request API for peer-to-peer connectivityPasspointSave networks and Passpoint configurationsCellularEnhance your apps with 5GVPNBluetoothBluetooth ClassicOverview of Android support for BluetoothSet up BluetoothFind Bluetooth devicesConnect Bluetooth devicesTransfer Bluetooth dataWork with Bluetooth profilesSet up companion device pairingBluetooth Low Energy (BLE) About Android support for BLEFind BLE devicesConnect to a GATT serverTransfer BLE dataBLE AudioAbout BLE AudioUse Audio Manager self-managed callsManage calls using the Telecom APISet up audio recordingNear Field Communication (NFC)About NFCNFC basicsAdvanced NFCAbout host-based card emulationUSBUSB host and accessory overviewLearn about USB accessories Connect to USB hostsUltra-wideband (UWB)TelecomAbout telecomBuild a calling appPrevent caller ID spoofingTelephony IDsRenderscriptAbout RenderscriptAdvanced RenderScriptMigrate from RenderScriptRuntime API referenceAbout Runtime APINumerical typesObject typesConversion functionsMathematical constants and functionsVector math functionsMatrix functions Quaternion functionsAtomic update functionsTime functions and typesAllocation data access functionsObject characteristics functionsKernel invocation functions and typesInput/output functionsDebugging functionsGraphics functions and typesIndexAndroid app bundlesAbout app bundlesConfigure the base moduleBuild and test your app bundleAdd code transparencyAbout the app bundle format Frequently asked questionsGoogle PlayGoogle Play BillingGoogle Play Core librariesEngage SDKAbout Engage SDKEngage SDK Watch integration guideEngage SDK Listen integration guideEngage SDK Read integration guideEngage SDK Shopping integration guideEngage SDK Food integration guideEngage SDK Social integration guideEngage SDK integration workflowEngage SDK Cluster publishing guidelines Engage SDK Frequently asked questionsEngage SDK Release NotesPlay PointsAbout Play PointsCreate products and promotionsDetect and deliver productsTest productsPlay Asset DeliveryAbout Play Asset DeliveryIntegrate asset delivery (Kotlin & Java)Integrate asset delivery (native)Integrate asset delivery (Unity)Target texture compression formatsTest asset deliveryPlay Feature Delivery About Play Feature DeliveryConfigure install-time deliveryConfigure conditional deliveryConfigure on-demand deliveryOn-demand delivery best practicesConfigure instant deliveryAdditional resourcesIn-app reviewsOverviewIntegrate using Kotlin or JavaIntegrate using native codeIntegrate using UnityTest in-app reviewsIn-app updatesAbout in-app updatesSupport in-app updates (Kotlin or Java) Support in-app updates (Native)Support in-app updates (Unity)Test in-app updatesGoogle Play InstantAbout Google Play InstantGet started with instant appsCreate an instant-enabled app bundleUX best practices for appsGet started with instant gamesAbout instant gamesUnity pluginUX best practices for gamesMigrate to Android App BundlesImplement cloud delivery of assetsSupport Google Play Games Services Instant Play gamesInstant Play games checklistReduce the size of your instant app or gameAdd ads to your instant app or gameProvide multiple entry pointsIntegrate with FirebaseAdd Google Analytics for Firebase to your instant appUse Firebase Dynamic Links with instant appsTechnical requirements checklistGoogle Play Instant policyResourcesReferenceCode samplesSDK release notes Instant App IntentsSupportKnown issuesStackOverflowPlay Developer APIsPlay Install ReferrerOverviewPlay Install Referrer LibraryOverviewReferenceRelease notesPlay Install Referrer APIPlay Integrity APIPlay RequirementsPlay PoliciesTarget API LevelSupport 64-bit architecturesApplication LicensingOverviewLicensing Overview Setting Up for LicensingAdding Server-Side VerificationAdding Client-Side VerificationLicensing ReferenceAPK Expansion FilesApp updatesGoogle AssistantAbout Assistant for AndroidBuildAbout App ActionsImplement built-in intentsCreate shortcuts.xmlPush dynamic shortcuts to AssistantRelease notesTestGoogle Assistant pluginApp Actions Test LibraryGrow Engage your usersIn-App Shortcut Promo SDKAdd more featuresCustom intentsAndroid widgetsForeground app invocationInline inventoryWeb inventoryAssistant sharingRead ItDevicesApp Actions for carsAssistant for Wear OSActions.xmlActions.xml migration guideAbout Actions.xmlBuild App ActionsCreate actions.xmlWeb inventoryApp Actions test tool Android SlicesTroubleshootingSupportSDK ExtensionsGamesGamesDevelopAbout game development toolsUse a game engineAbout game enginesDevelop with DefoldInstall and configure projects for AndroidSupport multiple form factors and screen sizesExport to AndroidDevelop with GodotInstall and configure projects for AndroidGodot renderer optionsSupport multiple form factors and screen sizes Export to AndroidDevelop with CocosSteps to build a game for Android in Cocos CreatorPublish your game as Google Play Instant app in Cocos CreatorPublish your game with Android App Bundle in Cocos CreatorRemote debugging on AndroidDevelop with UnityOverviewGet started on game development with UnityCreate an Android App Bundle with UnityIntegrate Play Asset DeliveryUnity Lighting in Mobile Games Use Android Performance TunerOverviewEnable the APIIntegrate the pluginInitialize the library and verify operationDefine annotations, fidelity parameters, and quality levelsAdd loading time recording functionsInclude Addressables scenesRun the monitor appReview and publishTroubleshoot common errorsReferenceSymbolicate Android crashes and ANR for Unity gamesGet started with the Memory Advice API for Unity games Develop with UnrealRequest permissions for data accessSecure your gameCreate or extend a game engineAbout custom game enginesStart with GameActivityAbout the GameActivity libraryGet started with GameActivityUse game text inputMigrate from NativeActivityConfigure graphicsUnderstand Android game loopsProcess input eventsAdd touch supportSupport text inputSupport game controllers OverviewUse the game controller libraryUse custom controller device mappingsAdd mouse supportSupport sensor inputOptimize frame pacingAbout the Frame Pacing libraryFrame pacing in OpenGL ESIntegrateUpdate your build settingsAdd frame pacing functionsVerify frame pacing improvementFrame pacing in VulkanIntegrateUpdate your build settingsAdd frame pacing functions Verify frame pacing improvementFrame Pacing API ReferenceAccess Java libraries from C/C++About the library wrapperGet started with library wrapperIntegrate Android Performance TunerAbout Android Performance TunerRun the APT demo appEnable the Android Performance Parameters APIUpdate your build settingsDefine annotations, fidelity parameters, and settingsAdd frame timing functionsAdd loading time recording functions Validate, package, and publish the APKTroubleshoot common errorsAdvanced usagePerformance Tuner API ReferenceDevelop for multiple form factors64-bit architecturesScreen typesVulkan pre-rotationOutput audioAbout the Oboe audio libraryUpdate build settingsCreate an audio streamSee Oboe code samplesSee the Oboe developer guideManage memoryAbout managing memory Debug native memory useDeliver assetsDetect and diagnose crashesAndroid Game Development Kit (AGDK)About the AGDKDownload the AGDKAGDK release notesAndroid Game Development Extension (AGDE) for Visual StudioAbout the AGDEGet started with AGDEConfigure your projectDebug your projectDebug memory corruption using Address SanitizerMeasure app performanceProfile-Guided Optimization (PGO) OverviewConfigure Profile-Guided OptimizationModify build.gradle files for Android StudioSee AGDE code samplesAGDE release notesGoogle Play Games on PCAbout Google Play Games on PCGet startedReview the release checklistSet upSet up your game for PC compatibilityConfigure your graphicsDevice inputSet up inputSet up mouse inputInput SDKAbout the Input SDK Get started with the Input SDKMigration GuidesOverviewUpgrade from 1.0 to 1.1 Java/KotlinUpgrade from 1.0 to 1.1 UnityUpgrade from 0.0.4 to 1.0 Java/KotlinUpgrade from 0.0.4 to 1.0 UnityCross-device playAbout continuity in cross-device playAbout continuity requirementsVerify your game's complianceFederate the identity servicesThird-party loginTestTest your gameUse the developer emulator Use ChromeOS devicesTroubleshoot the developer emulatorPublish and deployPackage your game for Google Play ServicesSubmit your gameUpdate your gameIntegrity ProtectionFAQUse Vulkan for graphicsManage, debug, and profile in Android StudioOptimizeAbout optimization toolsConfigure system tracingReduce game sizeAndroid GPU Inspector (AGI)About AGIQuickstart Supported devicesSystem profilingAbout system profilingView a system profileGPU performance countersAnalyze a system profileFrame processing timesMemory efficiencyTexture memory bandwidth usageVertex memory bandwidth usageThread schedulingFrame profilingAbout frame profilingAnalyze a frame profileMost expensive render passesVertex formatsShader performance Frame Profiler UIPerformance paneCommands paneFramebuffer paneGeometry paneReport paneShader paneMemory paneState paneTextures paneTexture panePipeline view paneSupported Vulkan extensionsTroubleshoot AGIAndroid Performance Tuner (APT)Android Dynamic Performance Framework (ADPF)Optimize 3D assetsManage vertex dataMemory Advice API About the Memory Advice APIGet started with the Memory Advice APIGame Mode APIAbout the Game Mode API and interventionsUse the Game Mode APIUse Game Mode interventionsGame DashboardAbout the Game DashboardComponentsDeliverAbout distributing with Google PlayGoogle Play Games ServicesAbout Google Play Games ServicesGet startedDownloadsSet up Play Games Services Enable Play Games Services featuresManage project settings in Google CloudPublish through Google Play ConsoleManage Play Games Services featuresSign inAchievementsLeaderboardsEventsSaved gamesFriendsNext generation Player IDsUse the APIsNative SDKPlugin for UnityAbout the Google Play Games plugin for UnityGet startedAdd featuresAchievements LeaderboardsSaved gamesEventsFriendsPlayer statsJavaGet startedSign inEnable server-side accessAnti-piracyAdd featuresAchievementsLeaderboardsFriendsSaved gamesEventsPlayer statsTroubleshootingPublishing APIAbout the Publishing APIGet startedUpload imagesManagement APIReview checklists and guidelines Quality checklistBranding guidelinesQuota and rate limitsData disclosure requirementsTerms of serviceGet supportPlay as you DownloadAbout Play as you DownloadBest practicesHealth and fitness appsHealth ConnectIntroductionAbout the Health Connect platformAvailabilityArchitectureDeveloper functionalityGet startedData and data typesIntroduction Data typesUser PrivacyCommon workflowsWrite dataRead raw dataRead aggregated dataDelete dataSynchronize dataExercise routesExceptionsBest practicesFrequently asked questionsVideo repositorySDK release notesHealth Connect guidelinesUX guidelinesBasic guidancePermissions and dataTest applicationsHealth Connect ToolboxTest cases MigrateHealth Connect API comparison guideFit Android API to Health Connect migration guideMigrate from Android 13 to 14Rate limitsBest practicesTestingTest apps on AndroidFundamentalsFundamentals of testing Android appsWhat to test in AndroidUsing test doubles in AndroidLocal testsBuild local testsInstrumented testsBuild instrumented testsAutomate UI tests AndroidX test librariesSet up project for AndroidX TestJUnit4 rules with AndroidX TestAndroidJUnitRunnerEspressoEspressoEspresso basicsEspresso setup instructionsEspresso cheat sheetEspresso idling resourcesEspresso-IntentsEspresso listsMultiprocess EspressoEspresso recipesEspresso WebAccessibility checkingAdditional Resources for EspressoTesting other components Test content providersTest your serviceWrite automated tests with UI AutomatorPerformanceAccessibilityPrivacyBuild apps to be more privatePrivacy best practicesPrivacy cheat sheetPermission minimizationMinimize your permission requestsReset unused permissionsLocation minimizationUse coarse location accuracyAccess location in the background only when necessaryAccess nearby Bluetooth devices Access nearby Wi-Fi devicesData minimizationDeclare package visibility needsWork with user-resettable identifiersSupport scoped storageTransparency and controlWorkflow for requesting permissionsProvide prominent disclosure and consentExplain why your app needs permissionsAudit access to dataHandle permission denialsReview how your app collects and shares user dataUser-facing privacy features IndicatorsPasting an intentPrivacy DashboardApp hibernationPrivacy Sandbox on AndroidOverviewIntroductionProgress updatesRelease notesGet startedChoose a developer programEnroll your platform with the Privacy SandboxSet up your development environmentConfigure AdServicesSet up a device or emulator imageConfigure devices to use Privacy Sandbox on AndroidDesign proposals SDK RuntimeTopicsProtected Audience on AndroidOverview of Protected AudienceMediationFrequency cappingApp install ads filteringBidding and Auction servicesAttribution ReportingOverview and app measurementCross app and web measurementMeasurement Simulation LibraryDeveloper GuidesSDK RuntimeTopicsProtected Audience on AndroidDeveloper guideProfile a Protected Audience auction Attribution ReportingIntegration guidesSDK Runtime APITopicsProtected Audience on AndroidAttribution Reporting APIAPI referenceSamplesSecurityAbout security on AndroidApp security best practicesApp security improvement programMitigate security risks in your appCommon risksandroid:debuggableandroid:exportedCleartext / Plaintext HTTPContent resolvers Hardcoded Cryptographic SecretsImplicit Intent hijackingImproperly Exposed Directories to FileProviderInsecure API or LibraryIntent redirectionLog Info DisclosurePath traversalPending intentsSQL injectionSticky BroadcastsStrandHogg Attack / Task Affinity VulnerabilityTapjackingUnsafe HostnameVerifierUnsafe TrustManagerWeak PRNGZip Path TraversalConfirm safety of execution environment About SafetyNetPlay Integrity APISafetyNet Safe Browsing APISafetyNet reCAPTCHA APISafetyNet Verify Apps APIVerifying hardware-backed key pairs with key attestationSafetyNet Attestation APIDiscontinuing SafetyNet AttestationProtect data at restWork with data more securelyCryptographyAndroid Keystore SystemRunning embedded DEX code directly from APKProtect data sent over a network Security with network protocolsNetwork security configurationUpdate your security provider to protect against SSL exploitsAndroid Protected ConfirmationSafetyNet Safe Browsing APIMinimize use of optimized but unverified codePerform actions before initial device unlockSDKsSDK best practices Modern Android Explore Modern Android Adopt Compose for teams Get started Hello world Training courses Tutorials Kotlin for Android Monetization with Play Extend by device Tablets and foldables Wear OS Android for Cars Android TV ChromeOS Cross-device SDK Build by category Games Media apps Health & Fitness Enterprise apps Get the latest Platform releases Android Studio preview Jetpack & Compose libraries Wear OS preview Privacy Sandbox Kits & more Go to Android & Material kits Go to Wear OS kits UI Design Design for Android Mobile Large screens Wear OS TV Architecture Introduction Libraries Navigation Modularization Testing Quality Overview Core value User experience Technical quality Privacy & security Build for Billions Overview About new markets Android (Go edition) Privacy best practices bookmark_border Stay organized with collections Save and categorize content based on your preferences. Android is focused on helping users take advantage of the latest innovations while making their security and privacy top priorities.Some of the best practices described on this page also appear in the cheat sheet . Pay attention to permissions Build trust with your users by being transparent and providing users control over how they experience your app. Request the minimum permissions that your feature needs . Whenever you introduce major changes to your app, review the requested permissions to confirm that your app's features still need them. Keep in mind that newer versions of Android often introduce ways to access data in a privacy-conscious manner without requiring permissions. For more information, see Evaluate whether your app needs to declare permissions . If your app is distributed on Google Play, Android vitals tells you the percentage of users who deny permissions in your app. Use this data to reassess the design of features whose required permissions are most commonly denied.Follow the recommended flow to explain why a feature in your app needs a permission . Request the permission when it's needed, rather than at app startup, so that the permission need is clear to users. Keep in mind that users or the system can deny the permission multiple times. Android respects this user choice by ignoring permission requests from the same app.Gracefully degrade when users deny or revoke a permission. For example, you can disable your app's voice input feature if the user doesn't grant the microphone permission.When you update your app, remove your app's access to any runtime permissions that your app no longer needs. If you are using an SDK or library that accesses data guarded by dangerous permissions, users generally attribute this to your app. Make sure you understand the permissions that your SDKs require and why . If you test your app on Android 11 (API level 30), use data access auditing to discover places in your code and in third-party library code where private data is being accessed. Minimize your use of location If your app can support its use cases without requiring any location data, don't request any location permissions. If your app requests permission to access location, help users make an informed decision. If your app needs to collect location information, explain to users how your app uses this information to deliver specific benefits to them.If your app needs to pair the user's device with a nearby device over Bluetooth or Wi-Fi, use the companion device manager , which doesn't require location permissions.Review the level of location granularity that your app needs. Coarse location access is sufficient to fulfill most location-related use cases. Access location data while your app is visible to the user. That way, users can better understand why your app requests location information.If your app requires background location, such as when implementing geofencing, make sure that it's critical to the core functionality of the app and is done in a way that's obvious to users. Learn more about considerations for using background location .On Android 10 (API level 29) and higher, users can limit your app's location access to while the app is in use. Design your app so that it degrades gracefully when it doesn't have all-the-time access to location. If your app needs to retain location access for a user-initiated ongoing task after the user navigates away from your app's UI, start a foreground service before your app goes into the background. You can do this in one of Android's lifecycle callbacks, such as .Don't initiate foreground services from the background. Instead, consider launching your app from a notification and then executing the location code when your app's UI becomes visible. Handle data safely Note: You can read more about what's considered sensitive data in the User Data article page in the Google Play Developer Policy Center. Be transparent and secure in how you handle sensitive data. Make users aware of when and why your app collects, uses, or shares sensitive data.Use the scoped storage model if possible. Learn how to migrate to scoped storage based on your app's use cases .Always use secure network connections . For your app's data at rest, use Android's built-in credential encryption. For data in transit, use TLS, the successor of SSL, for all data transmission regardless of sensitivity. Place files that contain sensitive data in your app-private directory within internal storage .On Android 10 (API level 29), store files only relevant to your app in the app-specific directory in external storage . Learn more about scoped storage .If you need to pass sensitive data to another app, use an explicit intent . Grant one-time data access to further restrict the other app's access. Even when your app is in the foreground, show a real-time indication that you are capturing from the microphone or camera.Note that Android 9 (API level 28) and higher don't allow for microphone or camera access when your app is in the background.Don't include sensitive data in logcat messages or your app's log files. Learn more about how to handle user data . Jetpack offers several libraries to keep your app's data more secure. Learn more in the guides on using the Jetpack Security library and the Jetpack Preferences library . Use resettable identifiers Respect your users' privacy and use resettable identifiers. See Best practices for unique identifiers for more information. Don't access IMEI or the device serial number, as these identifiers are persistent. If you try to access these identifiers in an app that targets Android 10 (API level 29) or higher, a occurs.Only use an advertising ID for user profiling or ads use cases . For apps in Google Play, this is a requirement. Always respect user preferences on advertisement tracking for personalization.For the vast majority of non-ads use cases, use a privately stored globally-unique ID (GUID) , which is app-scoped. Use the secure settings Android ID (SSAID) to share state between the apps that you own without requiring the user to sign in to an account. Learn more about how to track signed-out user preferences between apps . Content and code samples on this page are subject to the licenses described in the Content License . Java and OpenJDK are trademarks or registered trademarks of Oracle and/or its affiliates. Last updated 2023-03-13 UTC. More Android Discover Android Devices Releases Documentation and Downloads Support Get news and tips by email SubscribeSet your privacy boundaries. With Android, you choose when to share certain sensitive data with apps you download. App permissions Decide when you share data. Allow microphone, camera or location access all the time, just once or never. Learn about app permissions Permission manager Manage all your permissions in one place. Access and control all your sensitive app permissions in one central location. Learn about Permission manager Location Control how your location is shared. Choose which apps get your approximate location and which apps get more precise information. Learn about location permissions Auto reset permissions Reset access for unused apps. If you haven't used an app in a while, Android will automatically reset your permissions. Learn about auto reset Data safety section Find out how different apps use your data. The data safety section in Google Play provides details about what data an app can access and use. That way you can confidently decide which apps to download. Try now Tracker alerts Unknown tracker alerts help protect you from unwanted tracking. Your phone automatically detects and notifies you of unfamiliar tracking devices that are moving with you. Locate them with ease. Learn about unknown tracker alerts Camera & mic Toggle your phoneâ€™s eyes and ears. Android lets you know when your camera and microphone are in use with green icons in the top right corner. Just toggle to disable camera and mic access system-wide. Learn about camera and mic controls Protected computing Technology that ensures your data safety and privacy. Android minimizes and de-identifies your data from intelligent features. And restricts access to technically ensure your privacy and safety. Learn about protected computing Phones Find your perfect phone. Choose phones from your favorite brands, all with helpful features from Google. Explore Android Phones Switch to Android Itâ€™s never been easier to switch. Securely transfer your photos, videos, messages and more from your iPhone to your new Android phone. Make the switch Prioritizing physical safety Get help when and where you need it most. Make it easier for first responders to find you in a moment of crisis. Receive alerts that can help you seek safety faster. And communicate with loved ones when youâ€™re in urgent need of help. Explore physical safety features Developer ResourcesAndroid Studio and SDKAndroid Open Source ProjectEnterprise OverviewEssentialsManagementSecurityEnrollmentEmployeesRecommendedEnterprise DevicesResourcesFor PartnersSolutions DirectoryAndroid BlogEnterprise BlogPress CornerAndroid is for everyoneContact Press TeamHow Google Play worksAndroid Auto Android TVWear OS by GoogleSwitch from iOSAndroid Help CenterAndroid File TransferFind My DeviceJoin User Studies Privacy Policy Languages Find Android on Twitter Find Android on Instagram Find Android on YouTube Find Android on Facebook Find Android on LinkedIn Some features and devices may not be available in all countries. Subject to availability. Some features and availability vary by OEM and/or device manufacturer.Skip to content What is Android Android 13 Phones Tablets Enterprise Search What is Android Android 13 Phones Tablets Enterprise Android Developers Languages Malware Malware Malware Spam Physical Powerful protection. Only on Android. Always on protection Constantly innovating to help keep you secure. Your deviceâ€™s built-in security is always working. Advanced intelligence and machine learning helps to proactively protect you against new threats every day. And helps defend your data against bad apps, malware, phishing and spam. Explore mobile security features Set privacy boundaries Take more control of your mobile privacy. Seamlessly manage how your data is shared and used. Access all your privacy settings in one place and easily change permissions whenever you feel like it. Personalize your mobile privacy experience Prioritizing physical safety Get help when and where you need it most. Make it easier for first responders to find you in a moment of crisis. Receive alerts that can help you seek safety faster. And communicate with loved ones when youâ€™re in urgent need of help. Explore physical safety features Developer Resources Android Studio and SDK Android Open Source Project Enterprise Overview Essentials Management Security Enrollment Employees Recommended Enterprise Devices Resources For Partners Solutions Directory Android Blog Enterprise Blog Press Corner Android is for everyone Contact Press Team How Google Play works Android Auto Android TV Wear OS by Google Switch from iOS Android Help Center Android File Transfer Find My Device Join User Studies Privacy Policy Languages Find Android on Twitter Find Android on Instagram Find Android on YouTube Find Android on Facebook Find Android on LinkedIn Some features and devices may not be available in all countries. Subject to availability. Some features and availability vary by OEM and/or device manufacturer.