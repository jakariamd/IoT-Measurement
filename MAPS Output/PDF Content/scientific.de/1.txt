The TransactionVision Solution Bristol's TransactionVision transaction tracking and analysis software that provides a real-time view of business transactions flo- wing through a distributed enterprise envi- ronment via WebSphere MQ, CICS, JMS, J2EE, JDBC, TIBCO, and Web Services. TransactionVision automatically and non- intrusively tracks transactions across each touch point, self-discovering transaction flows and content while providing real-time monito- ring to pinpoint failures and ensure service levels. What is a Transaction? TransactionVision is revolutionary in its ability to connect the technical and business per- spectives of transactional activity. To fully understand the value, it is important to un- derstand how Bristol defines a "transaction." From a technologist's point of view, a transac- tion is a series of actions within a single appli- cation. These actions form an atomic unit of work in which the actions are all made per- manent (committed) or undone (backed out) as one, rather than independently. But to a business person a transaction is a unique business interaction, such as a stock trade or an online purchase. Business tran- sactions are complex events made up of a series of interrelated activities (simple events) that, when executed, form the transaction. In enterprise environments, business transacti- ons frequently are distributed, requiring nume- rous related units of work, which are tied together with transactional middleware such as WebSphere MQ. TransactionVision transactions refer to the definition of a business transaction (e.g., stock trade or online purchase). These tran- sactions (or complex events) are comprised of multiple units of work (or simple events). TransactionVision uses patent-pending algo- rithms to construct the business transactions from the multiple units of work as they are executed, recording them in an open reposito- ry and providing business and technology oriented views. It automatically constructs and displays graphical views of the flow, timing, and business content of each transaction. TransactionVision accomplishes this by tra- cking the interaction between applications at the middleware API level. This enables Tran- sactionVision to observe the details necessa- transaction's execution as it flows across multiple applicati- ons on heterogeneous, geographically disper- sed systems. to construct a business TransactionVision Benefits TransactionVision's transaction tracking ca- pabilities enable our clients to: (cid:1) Accelerate problem resolution by quickly pinpointing transaction issues across distributed heterogeneous business processes. (cid:1) Improve service level management by providing a transaction-based service level view. (cid:1) Mitigate risks by quantifying business con- sequences against IT performance. (cid:1) Monitor business activities in real-time by capturing the business content of each tran- saction to measure key performance indica- tors. (cid:1) Monitor both transactional patterns and transaction content patterns to identify is- sues and trigger automated processes or notifications. (cid:1) Optimize transaction performance and improve capacity planning. These benefits are readily demonstrable in TransactionVision's views. By depicting critical information such as data volumes (indicated by the width of the lines between components) or average communi- for cation capacity planning and performance optimiza- tion is rapidly visualized. latencies, essential information © Copyright 2006 Scientific Computers GmbH. Alle enthaltenen Beiträge und Abbildungen sind urheberrechtlich geschützt. Kopieren oder Nachdruck verboten. Ausnahmen nur mit ausdrücklicher Genehmigung. Alle Produktnamen und Warenzeichen sind das Eigentum der respektiven Inhaber. Page 1 TransactionVision Architecture TransactionVision uses a three-tier design to capture, analyze and present transactional information. The diagram below shows its major components: Sensors, the Analyzer, and the Web User Interface. As shown, the Analyzer and Web User Interface utilize a standard relational database as a repository for collected transaction data. Sensors The Sensors collect transactional events from the various applications and report them to the TransactionVision Analyzer. Events are collected by monitoring the interactions bet- ween the applications and the middleware, including WebSphere MQ, CICS, JMS, J2EE, JDBC, TIBCO EMS and Web Services. are Sensors high- performance, and they are non-intrusive to the applications being monitored, requiring no lightweight and changes to the application logic or source code. Sensors have negligible, often immea- surable, impact on end-to-end transaction response time. The information they report allows the reconstruction of the flow, timing, and content of the monitored transactions. Sensors are specific to the platform and type of middlewa- re, and are available for a wide- range of combinations. Plat- form support includes UNIX, OS/400, Linux, OS/390, z/OS, and Windows. The mechanism used to moni- tor the interaction between an application and the middleware varies by type of middleware and by platform. As an e- xample, on distributed plat- forms the WebSphere MQ Sensor consists of a small shared library that is included in the application's load library path. The application communicates with the middleware, and the sensor quickly scans the events as they pass from the application to the middleware. The CICS Sensor uses the CICS Global User Exit (GLUEs) and Task Related User Exits (TRUEs) to monitor key APIs inside CICS transactional flows. The installation mechanism varies by type of sensor and platform, but in each case the installation and configuration of the Sensor is designed to be quick and straightforward; even complex systems can be installed in days. Analyzer The Analyzer is a Java application that per- forms a variety of functional tasks including Event Collection, Event Analysis, and Tran- saction Analysis. Event Collection The Analyzer interfaces with all of the Sen- sors, providing them with configuration infor- mation to control the data collection process. This configuration information includes data collection filtering settings, which specify to the Sensors what information and data to report - for example, which programs, hosts, time periods, or infrastructure components are of interest. Communication between the Sen- sors and the Analyzer is via asynchronous messaging to ensure scalability, reliability, and security. The Analyzer receives the reported events from the Sensors and performs Event Analy- Page 2 © Copyright 2006 Scientific Computers GmbH. Alle enthaltenen Beiträge und Abbildungen sind urheberrechtlich geschützt. Kopieren oder Nachdruck verboten. Ausnahmen nur mit ausdrücklicher Genehmigung. Alle Produktnamen und Warenzeichen sind das Eigentum der respektiven Inhaber. sis, as described below, upon them. The Analyzer components responsible for Data Collection and Event Analysis are multithrea- ded to provide scalability to support high transaction volumes, even across multiple processors when necessary. Event Analysis The Analyzer's Event Analysis processing consists of unmarshalling, correlation, analy- sis and data management functions. Most notably, the Transaction Constructor compo- nent of the Analyzer, as described below, constructs groups of related individual repor- ted events (API calls, servlet invocations, etc.) into coherent end-to-end business transacti- ons. The Transaction Constructor Individual transactions within enterprise appli- cations are grouped into logical units of work. Units of work are denoted by middleware APIs visible to TransactionVision that allow developers to commit or rollback middleware transactions. This grouping of events allows TransactionVision to know what events are related to a single local transaction. Events leaving one application are matched with events arriving at another application by in- formation the middleware infrastructure. The transaction correlation feature works whether or not the customer elects to collect business content data as part of transaction monitoring. TransactionVision monitors units of work as the transaction events flow from one process to another and when these cascading events end, a picture of the complete business process is presen- ted. inherent The typical TransactionVision customer will never need to customize its correlation logic; however, each of the Event Analysis functions is performed by chained JavaBeans, which the customer may override or sub-class to tailor the analysis to their specific require- ments. Examples include: Custom beans in the unmarshalling process to convert binary message data into XML formats specific to particular business applica- tions. Custom beans in the correlation and analysis process to provide correlation with unsuppor- ted middleware technologies or proprietary inter-process communication solutions. This capability allows tailored correlation extensi- ons that can tie two parts of a transaction that flows through a proprietary to- messaging gether. system Custom beans in the ana- lysis step recognize appli- specific cation infrastructure exceptions and send SNMP or other alerts to system monitoring products (e.g. Tivoli Enter- prise Console, HP Open- View, and Micromuse NetCool.) Custom beans in the data management process pull application specific fields from the transaction events and insert this data into database tables for reporting and querying. In addition, select information can be filtered out of the data collection pro- cess to protect information privacy policies or requirements. This flexibility benefits systems integrators or users with complex requirements or unique integration needs. For less technical users, TransactionVision's complex event processor allows business analysts to develop custom solutions without programming in Java. The resulting description of the reconstructed transaction is stored into a relational database such as DB2 or Oracle. Data collected by TransactionVision is stored in XML, providing an open format that is easily queried or trans- formed into other formats. TransactionVision provides open access to information via stan- dard database interfaces Transaction Analysis The Analyzer's Transaction Analysis proces- sing evaluates the reconstructed transactions and invokes actions on these events as defi- ned by the user. This analysis includes classi- Page 3 © Copyright 2006 Scientific Computers GmbH. Alle enthaltenen Beiträge und Abbildungen sind urheberrechtlich geschützt. Kopieren oder Nachdruck verboten. Ausnahmen nur mit ausdrücklicher Genehmigung. Alle Produktnamen und Warenzeichen sind das Eigentum der respektiven Inhaber. fication of transactions into user defined tran- saction classes (e.g., equity trades, pay- ments), and maintaining level response time metrics for each transaction. From this, service level performance require- ments can be automatically evaluated. Sepa- rate service level targets for different transac- tion classes can be readily set and evaluated. transaction The Transaction Analysis process is customi- zable through JavaBeans, in a manner similar to the Event Analysis process or through an XML-based rules classification file. The action to take in response to an identified problem within a transaction also is configured by the user. For example, if a response time SLA target is violated an alert is automatically generated. Complex event processor The complex event processor extends Tran- sactionVision's ability to react to failures, predict problems based on event patterns and create alerts triggered by event patterns. This complex event processing engine allows transactional to monitor both businesses patterns and transaction content patterns to identify issues sooner to notify people and/or trigger automated processes. The following table lists the basic building blocks used to construct the patterns in the rules engine for situational analysis: Pattern Class Examples Transaction attributes Transaction content Temporal settings External data state, results, loca- tion, transaction content stock price, order destination, custo- mer id between 9 am and 11 am, 3 times in one minute, last week database field, system information, reconciliation table The complex event processor feature of Tran- sactionVision monitors event and event timing patterns enabling real-time reaction to events or series of events. Consider the following scenarios: (cid:1) Service Level Agreement Alerts - Tran- sactionVision sends an alert message if an order was sent for processing and no response was received within the time specified by the SLA. (cid:1) Capital Markets Compliance or Regulato- ry Checks - TransactionVision sends an alert message related to a bulk buy tran- saction that is performance in less than the regulatory allowed time after a bulk sell (cid:1) Credit Card Fraud Detection - Transacti- onVision sends an alert message when multiple credit card purchases are execu- ted within a specified brief time frame at a distance greater than 100 miles. Installation Architecture The Analyzer is a Java-based application that is installed on a server that has high band- width connections to the RDBMS server and the Web User Interface application server. As depicted below, the TransactionVision archi- tecture allows the Analyzer, the Web User Interface and the associated RDBMS to be installed on the same server or on separate servers, depending on the customer's need for scalability. Web User Interface TransactionVision's user access is via a J2EE Web interface. This becomes especially im- portant when TransactionVision is used for operational reporting by users throughout the global enterprise. The interface services build on either IBM WebSphere Application Server or BEA WebLogic Application Server for a robust, scalable, and secure solution that operates in a variety of platform environ- ments. All of TransactionVision's user inter- faces provide role-based security controls, integrating with LDAP solutions to manage which users have access to which information and functionality. Job Scheduling The Web User Interface also enables the user to schedule recurring tasks configured for each user environment. For example, it can execute custom analysis logic to aggregate business metrics to enable real-time dashbo- ards, run regular reports, or trim transactional data. Job Scheduling provides extremely fast reporting of key performance indicators, even if their computation involves a large quantity of transaction data. © Copyright 2006 Scientific Computers GmbH. Alle enthaltenen Beiträge und Abbildungen sind urheberrechtlich geschützt. Kopieren oder Nachdruck verboten. Ausnahmen nur mit ausdrücklicher Genehmigung. Alle Produktnamen und Warenzeichen sind das Eigentum der respektiven Inhaber. Page 4 Built-in Reports TransactionVision Web User Interface also offers an array of standard reports, including: (cid:1) Transaction Tracking (cid:1) Service Level Agreement Analysis (cid:1) Charge-Back (cid:1) Performance Dashboard (cid:1) Capacity Planning Custom Web Reporting Framework TransactionVision provides a framework to further refine the standard reports, or create new customized reports. In addition, since all data is stored in open relational databases, and the data itself is structured as XML, third party reporting tools can access the reposito- ry. Architectural Advantages is built TransactionVision for enterprise deployment. This means it meets the scalabi- lity, security and reliability requirements for today's demanding enterprises. It also means TransactionVision fits into the existing envi- ronment - easily integrating with business applications, supporting corporate standards for databases and middleware, and tying to standard enterprise management systems. Some of the architectural advantages of TransactionVision are: Scalability TransactionVision is a multi-tier infrastructure. The Sensors are distributed - fitting into each distributed system in a low overhead, easily installed manner. The Analyzer is multithrea- ded to take advantage of a wide range of server capacities. In addition, there can be multiple Analyzers deployed in an enterprise. TransactionVision uses industry standard relational database management system (RDBMS) to store data, and it runs on a comprehensive range of systems including UNIX, Linux and Windows. Performance The modular design of TransactionVision allows its work to be split across multiple processes and multiple servers to best fit the requirements of each installation. This modu- lar design provides transaction analysis even in extraordinarily high volume transaction environments. Security TransactionVision builds upon existing enter- prise security frameworks and provides fine- grain control over user access to sensitive transactional data. It integrates with LDAP enabled directory services and industry lea- ding single sign-on solutions. Data Management By building upon standard RDBMS products, such as IBM's DB2 and Oracle, Transaction- Vision leverages the storage management, back-up and recovery, and scalability that these products provide. Fine grain tracking information can be purged from the database after a set period of time, while aggregate metrics derived from these details can be retained longer. In addition, all data is stored in XML format for ease of use and complete openness for integration with other tools. Thin Client/Java Application Server Archi- tecture thin-client architecture TransactionVision's allows global concurrent access without ha- ving to install client applications on every user's PC. Extensible Platform/Data Accessibility TransactionVision opens up its rich data re- pository by making all transactional informati- on accessible through direct database con- nections, and XML data formats. Customizable Reporting Custom view of TransactionVision data can be created using J2EE technologies such as EJBs, JSPs, and Servlets, as well as with the integrated report generation tool. Reporting is also used to identify and alert users when rule-based business exception conditions occur. Relationship to Other Enterpri- se Technologies TransactionVision is a unique product, so it is worth noting how it relates to other relevant enterprise technologies: (cid:1) Middleware System Management (cid:1) Transaction Monitoring & Tracking (cid:1) EAI, Business Integration, or Enterprise Service Bus Solutions (cid:1) Web Services Management Bristol is focused on providing solutions to customers who need to track business tran- sactions across a complex, distributed envi- ronment. To understand this focus, it is first types of enterprise useful applications into two categories: to break the © Copyright 2006 Scientific Computers GmbH. Alle enthaltenen Beiträge und Abbildungen sind urheberrechtlich geschützt. Kopieren oder Nachdruck verboten. Ausnahmen nur mit ausdrücklicher Genehmigung. Alle Produktnamen und Warenzeichen sind das Eigentum der respektiven Inhaber. Page 5 1. Distributed Messaging The purpose of this architecture is to enable multiple application components residing on separate systems to communicate with each other. WebSphere MQ is the dominant form of this infrastructure today and is in use both internally as well as in inter-company net- works. 2. Web Application Servers This architecture became popular with the Web - providing a consolidating platform to host applications that received requests from Web Browsers, retrieved information from databases or backend systems and then responded back to the browser. Numerous system management and monito- ring products address the need of the enter- prise. It is useful to look at each of the above topics within the context of enterprise applica- tions and understand where Bristol's Transac- tionVision fits in the landscape. Middleware (WebSphere MQ or J2EE Ap- plication Server) Management TransactionVision is not a middleware system management product. However, it is compli- mentary to these products. traditional approach to managing a The WebSphere MQ environment is to monitor the status of each of the queue managers, queues, and channels, and report status through a central console. While important, this type of monitoring does not give a tran- saction-oriented view of the system - only a point solution view of a set of resources. The same sort of comparative issues apply with regard to Application Server manage- ment solutions. Customers often use the traditional system management products for infrastructure monitoring and use Transacti- onVision to provide transaction tracking and TransactionVision analysis. complements system management solutions by leveraging existing enterprise alert mana- gement capabilities as needed with business transaction issues. TransactionVision is a certified Ready for IBM Tivoli product. Moreover, In brief, management products look at antici- pated exceptions only. TransactionVision looks at transactions, not just exception tran- sactions, and can identify patterns that expo- se unanticipated exceptions as well as antici- pated exceptions. For example, Transaction- Vision can identify a denial of service attack on web sites by observing the volume of legi- timate activity. In this case, the exception is not associated with any one transaction, ho- wever, the rate of incoming transactions and the fact that they originate from relatively few connections could be indicative of a potential attack. Transaction Tracking & Monitoring TransactionVision is the only product that transactions across both tracks business distributed messaging environments and Web environments. There are tools that provide a purely Web-to-Application Server view of transactions, but TransactionVision offers a much broader and unique end-to-end transac- tion view across messaging and Web envi- ronments. Enterprise Application Integration, Busi- ness Process Management, or Enterprise Service Bus Solutions Most of the EAI, BPM and ESB vendors have some level of process monitoring. This is typically built around their workflow engines, and provides business process monitoring for the modeled part of their transactions. The problem most customers have is that they may not use the workflow tools, or they may have many applications or segments of their transactions that are implemented outside of the workflow products, greatly limiting visibili- ty. TransactionVision's auto-correlation capability discovers the workflow of legacy applications and can track transactions end-to-end across diverse integrated components. Web Services Management There are many early efforts to define web services management. The early entrants into this market broadly define it as including ma- nagement of security and failover and load balancing. However, Web Services Manage- ment does not focus on the correlation of the messages as they flow through a distributed network, since most web service applications are simple point-to-point implementations. TransactionVision focuses on the complex needs of a distributed heterogeneous envi- ronment Conclusion The TransactionVision technical and architec- tural differentiators provide customers with significant advantages: (cid:1) High levels of scalability, performance, and security (cid:1) A non-intrusive solution requiring no chan- ges to business applications or middleware (cid:1) A thin-client application server-based user interface that maximizes enterprise acces- sibility Page 6 © Copyright 2006 Scientific Computers GmbH. Alle enthaltenen Beiträge und Abbildungen sind urheberrechtlich geschützt. Kopieren oder Nachdruck verboten. Ausnahmen nur mit ausdrücklicher Genehmigung. Alle Produktnamen und Warenzeichen sind das Eigentum der respektiven Inhaber. (cid:1) An open, extensible platform for data ma- (cid:1) Monitor business activities in real-time nagement and access. based on key performance indicators. (cid:1) Monitor both transactional patterns and transaction content patterns to identify is- sues and trigger automated processes or notifications. (cid:1) Optimize transaction performance and improve capacity planning. Bristol's TransactionVision is a breakthrough solution for enterprises that rely on electronic transactions. Global customers across many industries rely on TransactionVision and its unique capability to track transactions across each touch point, self-discovering transaction flows and content while providing real-time monitoring to pinpoint failures and ensure service levels. EXECUTIVE SUMMARY Unique Solution Bristol's TransactionVision transaction tracking and analysis software that provides a real-time view of business transactions flo- wing through a distributed enterprise envi- ronment. TransactionVision automatically and non-intrusively transactions across each touch point, self-discovering transaction flows and content while providing real-time monitoring to pinpoint failures and ensure service levels. tracks Please contact us for more Information: Scientific Computers GmbH Friedlandstrasse 18 52064 Aachen / Germany (cid:3) +49 241 40008-0 (cid:4) +49 241 40008-13 www.scientific.de info@scientific.de No other solution duplicates the key Transac- tionVision feature set: non-intrusive end-to- end tracking and automatically reconstructing each step of business transactions across WebSphere MQ, CICS, JMS, J2EE, and Web Services, on a range of platforms including UNIX, Windows, and IBM mainframes. TransactionVision architecture features: (cid:1) High levels of scalability, performance, and security (cid:1) A non-intrusive solution requiring no chan- ges to business applications or middleware (cid:1) A thin-client application server-based user interface that maximizes enterprise acces- sibility (cid:1) An open, extensible platform for data ma- nagement and access. Usage Benefits the extensive TransactionVision provides transaction tracking capabilities necessary to: (cid:1) Accelerate problem resolution by quickly pinpointing transaction issues across distri- buted heterogeneous business processes. (cid:1) Improve service level management by providing a transaction-based service level view. (cid:1) Mitigate risks by quantifying business con- sequences against IT performance. © Copyright 2006 Scientific Computers GmbH. Alle enthaltenen Beiträge und Abbildungen sind urheberrechtlich geschützt. Kopieren oder Nachdruck verboten. Ausnahmen nur mit ausdrücklicher Genehmigung. Alle Produktnamen und Warenzeichen sind das Eigentum der respektiven Inhaber. Page 7