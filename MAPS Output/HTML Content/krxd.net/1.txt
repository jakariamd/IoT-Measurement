<div><h2>  Consent & Consumer Webservice</h2><span>   ./openapi.json </span><p>  Refer to our Zendesk article for higher level concepts. These API docs were generated from an <a href="https://swagger.io/docs/specification/about/" target="_blank"> OpenAPI Specification </a>.</p><span>  Server</span></div> <div><h4>  routes</h4><span>  GET</span><span>  /consent/get/{uuid} </span></div> <div><h4>  Parameters</h4><td>   *</td><td>  A UUID representing the current organization. You should receive this from your CSG representative.</td><td>   *</td><td>  The type of identifier, must be  (bridge key) or device.</td><p>  <i> Example </i> : device</p><td>  The type of the idv one of: , , , . Required if idt=device.</td><p>  <i> Example </i> : kxcookie</p><td>  Bridge key name; the attribute name of the bridge key passed in. This can be any bridge key attribute defined in your account. Require if idt=bk.</td></div> <td><td>  An ID value, which may be a Krux cookie, first party ID, advertiserId (from Android), IDFA (from iOS), bridge key value (e.g., hashed), or some other identifier. Leave blank to have the Krux Cookie looked up off the request.</td></td> <div><p>  <i> Example </i> : LuHdwxlQ</p><td>  Policy Regime the user falls under. If not given and we are unable to determine the policy regime through other means, the default policy regime will be used as configured for your organization. Currently, we support  and  as the values.</td><p>  <i> Example </i> : gdpr</p><td>  A callback to invoke for JSONP response. This must begin with  and the function should be defined on page before calling.</td><p>  <i> Example </i> : Krux_getConsent</p></div> <div><h4>  Responses</h4><td>  Code</td><td>  Description</td><td>  Links</td><td>  200</td><td>  success</td><small>  Controls  header.</small><td>  #/components/schemas/ConsentGet</td><span>  ConsentGet</span><td>  status</td><td>  Status</td><span>  integer</span><span>  ($int32)</span><span>  example: 200</span><p>  A status code mimicking an HTTP status code. (Used as a way to support HTTP semantics over JSONP.)</p><td>  body</td><td>  {...</td><td>  <i> No links </i></td><span>  GET</span><span>  /consent/set/{uuid} </span></div> <div><h4>  Parameters</h4><td>   *</td><td>  A UUID representing the current organization. You should receive this from your CSG representative.</td><td>   *</td><td>  The type of identifier, must be  (bridge key) or device.</td><p>  <i> Example </i> : device</p><td>  The type of the idv one of: , , , . Required if idt=device.</td><p>  <i> Example </i> : kxcookie</p><td>  Bridge key name; the attribute name of the bridge key passed in. This can be any bridge key attribute defined in your account. Require if idt=bk.</td></div> <td><td>  An ID value, which may be a Krux cookie, first party ID, advertiserId (from Android), IDFA (from iOS), bridge key value (e.g., hashed), or some other identifier. Leave blank to have the Krux Cookie looked up off the request.</td></td> <div><p>  <i> Example </i> : LuHdwxlQ</p><td>  Policy Regime the user falls under. If not given and we are unable to determine the policy regime through other means, the default policy regime will be used as configured for your organization.</td><td>  A callback to invoke for JSONP response. This must begin with  and the function should be defined on page before calling.</td><p>  <i> Example </i> : Krux_getConsent</p><td>   *</td><td>  Whether data collection is allowed.</td><p>  <i> Example </i> : 1</p></div> <div><td>   *</td><td>  Whether analytics is allowed.</td><p>  <i> Example </i> : 1</p><td>   *</td><td>  Whether targeting is allowed.</td><p>  <i> Example </i> : 1</p><td>   *</td><td>  Whether cross-device connections are allowed.</td><p>  <i> Example </i> : 1</p><td>   *</td><td>  Whether sharing is allowed.</td><p>  <i> Example </i> : 1</p><td>   *</td><td>  Whether re-identification is allowed.</td><p>  <i> Example </i> : 1</p></div> <div><h4>  Responses</h4><td>  Code</td><td>  Description</td><td>  Links</td><td>  200</td><td>  success</td><small>  Controls  header.</small><td>  #/components/schemas/ConsentSet</td><span>  ConsentSet</span><td>  status</td><td>  Status</td><span>  integer</span><span>  ($int32)</span><span>  example: 200</span><p>  A status code mimicking an HTTP status code. (Used as a way to support HTTP semantics over JSONP.)</p><td>  body</td><td>  {...</td><td>  <i> No links </i></td><span>  GET</span><span>  /consumer/remove/{uuid} </span></div> <div><h4>  Parameters</h4><td>   *</td><td>  A UUID representing the current organization. You should receive this from your CSG representative.</td><td>   *</td><td>  The type of identifier, must be  (bridge key) or device.</td><p>  <i> Example </i> : device</p><td>  The type of the idv one of: , , , . Required if idt=device.</td><p>  <i> Example </i> : kxcookie</p><td>  Bridge key name; the attribute name of the bridge key passed in. This can be any bridge key attribute defined in your account. Require if idt=bk.</td></div> <td><td>  An ID value, which may be a Krux cookie, first party ID, advertiserId (from Android), IDFA (from iOS), bridge key value (e.g., hashed), or some other identifier. Leave blank to have the Krux Cookie looked up off the request.</td></td> <div><p>  <i> Example </i> : LuHdwxlQ</p><td>  A callback to invoke for JSONP response. This must begin with  and the function should be defined on page before calling.</td><p>  <i> Example </i> : Krux_getConsent</p></div> <div><h4>  Responses</h4><td>  Code</td><td>  Description</td><td>  Links</td><td>  200</td><td>  success</td><small>  Controls  header.</small><td>  #/components/schemas/Acknowledgement</td><span>  Acknowledgement</span><td>  status</td><td>  Status</td><span>  integer</span><span>  ($int32)</span><span>  example: 200</span><p>  A status code mimicking an HTTP status code. (Used as a way to support HTTP semantics over JSONP.)</p><td>  body</td><td>  {...</td><td>  <i> No links </i></td><span>  GET</span></div> <div><span>  /consumer/portability/{uuid} </span></div> <div><h4>  Parameters</h4><td>   *</td><td>  A UUID representing the current organization. You should receive this from your CSG representative.</td><td>   *</td><td>  The type of identifier, must be  (bridge key) or device.</td><p>  <i> Example </i> : device</p><td>  The type of the idv one of: , , , . Required if idt=device.</td><p>  <i> Example </i> : kxcookie</p><td>  Bridge key name; the attribute name of the bridge key passed in. This can be any bridge key attribute defined in your account. Require if idt=bk.</td></div> <td><td>  An ID value, which may be a Krux cookie, first party ID, advertiserId (from Android), IDFA (from iOS), bridge key value (e.g., hashed), or some other identifier. Leave blank to have the Krux Cookie looked up off the request.</td></td> <div><p>  <i> Example </i> : LuHdwxlQ</p><td>  A callback to invoke for JSONP response. This must begin with  and the function should be defined on page before calling.</td></div> <div><h4>  Responses</h4><td>  Code</td><td>  Description</td><td>  Links</td><td>  200</td><td>  success</td><small>  Controls  header.</small><td>  #/components/schemas/Acknowledgement</td><span>  Acknowledgement</span><td>  status</td><td>  Status</td><span>  integer</span><span>  ($int32)</span><span>  example: 200</span><p>  A status code mimicking an HTTP status code. (Used as a way to support HTTP semantics over JSONP.)</p><td>  body</td><td>  {...</td><td>  <i> No links </i></td></div>