<div><span>  Unauthenticated User</span><span>  Container:</span><span>  iCloud.com.example.CloudKitCatalog</span><span>  Environment:</span><span>  production</span></div> <div><h1>  CloudKit on the web</h1><p>  This web application provides executable sample code for the core API methods provided by the CloudKit JS
                    JavaScript library. While these methods cover many typical use cases, there are more flexible versions
                    available if needed which allow for batch requests and more configuration. The user is advised to refer to the
                    <a href="https://developer.apple.com/library/prerelease/ios/documentation/CloudKitJS/Reference/CloudKitJavaScriptReference/index.html" target="_blank"> CloudKit JS Reference </a>
                    for more information.</p></div> <p><p>  All code examples can be run by clicking the play button at the top of the page. The results will be displayed below
                    the sample code block.</p></p> <div><h2>  Obtaining the CloudKit JS library</h2><p>  CloudKit JS is hosted at
                    <a href="https://cdn.apple-cloudkit.com/ck/2/cloudkit.js" target="_blank"> https://cdn.apple-cloudkit.com/ck/2/cloudkit.js </a>.
                    Include the library on your web page using either of the two methods below. You will
                    automatically get updates and bug fixes as they are released.</p></div> <div><h3>  Option #1 - Load CloudKit JS synchronously</h3><span>  script </span><span>  src=</span><span>  "https://cdn.apple-cloudkit.com/ck/2/cloudkit.js"></span><span>  </</span><span>  script></span></div> <div><h3>  Option #2 - Load CloudKit JS asynchronously</h3><span>  <!-- Listen for the cloudkitloaded event on the window object. --></span><span>  script></span><span>  
  </span><span>  window.addEventListener(</span><span>  'cloudkitloaded', </span><span>  function(</span><span>  ) {
    </span><span>  // Now the global namespace CloudKit is defined and you can proceed
    </span><span>  // to configure your application.
  });
</span><span>  </</span><span>  script></span><span>  <!-- Include the script with the ‘async’ attribute. --></span></div> <div><span>  script </span><span>  src=</span><span>  "https://cdn.apple-cloudkit.com/ck/2/cloudkit.js" </span><span>  async></span><span>  </</span><span>  script></span></div> <div><h2>  Configuring CloudKit JS</h2><p>  The first use of the CloudKit namespace in your javascript app should be configuration code.</p><span>  'en-us'</span><span>  // Change this to a container identifier you own.</span><span>  'com.example.apple-samplecode.cloudkit-catalog'</span><span>  // And generate a web token through CloudKit Dashboard.</span><span>  '<insert your token here>'</span><span>  true</span><span>  // Sets a cookie.</span><span>  'apple-sign-in-button'</span><span>  'black'</span></div> <span><span>  // Other options: 'white', 'white-with-outline'.</span></span> <div><span>  'apple-sign-out-button'</span><span>  'black'</span><span>  'development'</span><p>  Change the container identifier to one that you own.
                    For more information on how to create a container see <a href="https://developer.apple.com/library/etc/redirect/ios_cloudkit_dashboard_guide" target="_blank"> CloudKit Quick Start </a>.
                    You can can create a container and generate an API token through the
                    <a href="https://icloud.developer.apple.com/dashboard/" target="_blank"> CloudKit Dashboard </a>.
                </p></div> <div><h2>  Browser support</h2><p>  CloudKit JS is supported on Safari, Firefox, Chrome, Internet Explorer and Microsoft Edge, including embedded web views.
                    For security reasons, a mobile web view must launch the Apple sign-in page in a native browser in order
                    to use iCloud authentication.</p></div> <div><h1>  Server-side CloudKit with node.js</h1><p>  A powerful CloudKit feature is the ability to make API calls with a server script. This feature is enabled by creating a server-to-server key in the
                    <em> API Access </em> section of <a href="https://icloud.developer.apple.com/dashboard/" target="_blank"> CloudKit Dashboard </a>. Such a key allows
                    a server script to authenticate with CloudKit and make API calls to the <b> public database </b> with the inherited privileges of the creator of the key.
                    In this section we will explain this process for a node.js script using CloudKit JS.
                </p></div> <div><h2>  Creating a server-to-server key</h2><p>  If you are on a Mac, you already have OpenSSL installed and you can generate a private key in Terminal with this command:</p><p>  This will create the file  in your working directory. In <a href="https://icloud.developer.apple.com/dashboard/" target="_blank"> CloudKit Dashboard </a> navigate
                    to <em> API Access -> Server-to-Server Keys -> Add Server-to-Server Key </em> and paste the output of the following command into the <b> Public Key </b> text field of the new key.
                </p></div> <p><p>  Hit <em> Save </em> and the <b> Key ID </b> attribute will get populated. You will use this key ID in configuring your node script.
                </p></p> <div><h2>  Installing dependencies</h2><p>  In order to use CloudKit JS server-side you will need a <em> fetch </em> implementation such as <b> node-fetch </b> which you can install from NPM. You must also download CloudKit JS itself from Apple’s CDN.</p></div> <div><h2>  Configuring CloudKit JS in a node script</h2><p>  Create a script file in your working directory and add the following configuration code.</p><span>  var</span><span>  require</span><span>  'node-fetch'</span><span>  var</span><span>  require</span><span>  './cloudkit'</span><span>  console</span><span>  // Change this to a container identifier that you own.</span><span>  'com.example.apple-samplecode.cloudkit-catalog'</span><span>  'development'</span><span>  // This is the key ID you generated in CloudKit Dashboard.</span></div> <div><span>  '<insert key ID>'</span><span>  // This should reference the private key file that you used to</span><span>  // generate the above key ID.</span><span>  '/eckey.pem'</span><p>  <b> Note: </b> Never expose or share the above private key with anyone, including Apple, as it has unrestricted access to your CloudKit container.</p></div> <div><h2>  Authenticating and using the APIs</h2><p>  Before making API calls your script needs to authenticate with CloudKit using the server-to-server key that was set in the
                    configuration code.</p><span>  var</span><span>  // Server to server keys only allow calls to the public database.</span><span>  var</span><span>  // Authenticate with CloudKit using the server-to-server</span><span>  // key set in CloudKit.configure()</span><span>  function(</span><span>  userInfo) </span><span>  // The userInfo is that of the user who created the key in CloudKit Dashboard.</span></div> <div><span>  // If this user has permission to write a record of type Item to the</span><span>  // public database, the following call will succeed.</span><span>  return</span><span>  'Item'</span><span>  function(</span><span>  response) </span><span>  var</span><span>  console</span><span>  'Record name:'</span><span>  function(</span><span>  error) </span><span>  // Handle the error.</span><p>  You are now ready to start scripting with CloudKit JS and node.js. You may wish to look at the sections <a href="#query" target="_blank"> Query </a> and
                    <a href="#records" target="_blank"> Records </a> for examples of API calls that you can use in server-side scripts.</p></div> <div><h4>  Class: Container</h4></div> <div><h1>  .setUpAuth()</h1><p>  This sample demonstrates how to authenticate a user with your app.
                    There are two steps to authentication:</p><ul>  <li><b> Setting up auth. </b> This step checks whether a user is signed in. If you have specified
                     in your configuration you could run <i> setUpAuth </i> while bootstrapping
                    your app and this function will use the stored cookie. The promise resolves with a  object or
                     and a sign-in or
                    sign-out button will have been appended to the button container with id 
                    or  (whichever is appropriate).
                    These containers need to be in the DOM before executing the function and
                    their IDs can be customized in .
                    </li></ul></div> <ul><ul>  <li><b> Binding handlers to the rendered button. </b> The promises  and 
                    are resolved when the user signs-in/out respectively. The former resolves with a  object.</li></ul></ul> <p><p>  If you selected the option <i> Request user discoverability at sign in </i> when creating your API token, a user will be able to grant
                    discoverability permission to the app during the above sign-in flow.</p></p> <div><h4>  Class: Container</h4></div> <div><h1>  .fetchCurrentUserIdentity()</h1><p>  This sample demonstrates how to fetch the currently signed-in user’s  object.
                If the current user has made himself discoverable to the app, this object will have nonempty .
                </p></div> <div><h4>  Class: Container</h4></div> <div><h1>  .discoverAllUserIdentities()</h1><p>  This sample demonstrates how to obtain a list of  objects corresponding to users of the app
                in the signed-in user’s iCloud Contacts who have made themselves discoverable to the app.</p></div> <div><h4>  Class: Container</h4></div> <div><h1>  .discoverUserIdentityWithEmailAddress()</h1><p>  This sample demonstrates how to look up a user’s discoverable information by email address. This method will
                always return a  object with the  field populated. The other fields will be
                populated only if a matching discoverable user is found.</p></div> <div><h4>  Class: Container</h4></div> <div><h1>  .discoverUserIdentityWithUserRecordName()</h1><p>  This sample demonstrates how to look up a discoverable user’s identity by user record name.
                The  block is invoked when no matching user is found.</p></div> <div><h1>  Page Not Found</h1><p>  The page you were looking for was not found. Please use the menu on the left to navigate the app.</p></div> <div><h4>  Class: Container</h4></div> <div><h1>  .registerForNotifications()</h1><p>  This sample shows how to add a notification listener to the container. The listener will get called
                whenever the server sends us a notification of an update to a subscription. In order to receive notifications your app
                must park a connection with the notification backend using .</p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .saveRecords()</h1><p>  This sample demonstrates how to save a record to a cloud database. Leave the recordName field blank
                    to let the server generate a record name. Leave the recordChangeTag field blank when creating a new record and supply the latest
                    server change tag when modifying an existing record. Create a share record in the private database by specifying the record type
                    .</p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .deleteRecords()</h1><p>  This sample demonstrates how an authenticated user can delete a record.</p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .fetchRecords()</h1><p>  This sample demonstrates how to fetch a record by record name from any database and zone.</p></div> <div><h4>  Class: Container</h4></div> <div><h1>  .fetchRecordInfos()</h1><p>  This sample demonstrates how to resolve a record from a stable short GUID.</p></div> <div><h4>  Class: Container</h4></div> <div><h1>  .acceptShares()</h1><p>  This sample demonstrates how to accept a share with a short GUID.</p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .shareWithUI()</h1><p>  This sample shows how to share a record with the default sharing UI.</p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .saveSubscriptions()</h1><p>  This sample demonstrates how a user can subscribe to a change to a record in a specific zone
                (<i> zone subscription </i>) as well as to changes to records that match a query condition
                (<i> query subscription </i>). Once subscribed, your app can register for <a href="#notifications" target="_blank"> notifications </a>
                of changes.
                </p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .deleteSubscriptions()</h1><p>  This sample shows how to delete a subscription by ID.</p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .fetchSubscriptions()</h1><p>  This sample shows how to fetch a subscription by ID.</p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .fetchAllSubscriptions()</h1><p>  This sample shows how to fetch all subscriptions.</p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .fetchDatabaseChanges()</h1><p>  This sample demonstrates how an authenticated user can get all changed zones relative to a meta-sync token in their
                private or shared database.</p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .fetchRecordZoneChanges()</h1><p>  This sample demonstrates how an authenticated user can get all changes relative to a sync token in a custom or shared zone.
                    If no sync token is provided all records in the zone are returned. The response will always contain a new sync token
                    which can be cached in the client and sent in a new sync request. The sync token can also be used for paginating a result
                    set. The  boolean on the response indicates if the result set is incomplete.</p></div> <p><p>  When you have a zone-level <a href="#subscriptions" target="_blank"> subscription </a> you can get
                    <a href="#notifications" target="_blank"> notified </a> of changes to that zone and you would typically run 
                    to then fetch the latest changes and bring your client up-to-date.
                </p></p> <div><h4>  Class: Database</h4></div> <div><h1>  .saveRecordZones()</h1><p>  This sample shows how to create a custom zone in the user’s private database. Zones are useful for
                    syncing a user’s data. Once you have created a custom zone you will be able to
                    <a href="#records" target="_blank"> create records </a> in that zone and test the <a href="#sync" target="_blank"> sync </a> feature.</p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .deleteRecordZones()</h1><p>  This sample shows how to delete a custom zone by name from the private database.</p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .fetchRecordZones()</h1><p>  This sample shows how to fetch a record zone by name from the private database.</p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .fetchAllRecordZones()</h1><p>  This sample shows how to list all record zones in your private database. The response will always contain the default zone.</p></div> <div><h4>  Class: Database</h4></div> <div><h1>  .performQuery()</h1><p>  This sample demonstrates how any user can query records in the public database and a logged in user can query records in their
                    private database.</p></div>